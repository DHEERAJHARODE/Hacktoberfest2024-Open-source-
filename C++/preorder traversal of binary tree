/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    //Recursive TC:O(n),SC:O(n);
    // void preorder(TreeNode* root,vector<int>&v){
    //     if(!root) return;
    //     v.push_back(root->val);
    //     preorder(root->left,v);
    //     preorder(root->right,v);
    // }
    vector<int> preorderTraversal(TreeNode* root) {
        if(!root) return {};
        vector<int>v;
        // preorder(root,v);
        // return v;

        //Iterative TC:O(n),SC:O(n)
        // stack<TreeNode*>st;
        // st.push(root);
        // while(!st.empty()){
        //     root=st.top();
        //     st.pop();
        //     v.push_back(root->val);
        //     if(root->right!=NULL) st.push(root->right);
        //     if(root->left!=NULL) st.push(root->left);
        // }
        // return v;

        //Morris Traversal TC:O(n),SC:O(1)

        TreeNode*curr=root;
        while(curr!=NULL){
            if(curr->left==NULL){
                v.push_back(curr->val);
                curr=curr->right;
            }else{
                TreeNode*prev=curr->left;
                while(prev->right&&prev->right!=curr){
                    prev=prev->right;
                }
                if(prev->right==NULL){
                    prev->right=curr;
                    v.push_back(curr->val);
                    curr=curr->left;
                }else{
                    prev->right=NULL;
                    curr=curr->right;
                }
            }
        }
        return v;
    }
};
